// Generated by Melange

import * as Caml_array from "melange.js/caml_array.js";
import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Fetch from "melange-fetch/Fetch.js";
import * as Melange__ScrollingMessages from "./ScrollingMessages.js";
import * as Stdlib__Array from "melange/array.js";
import * as Stdlib__Format from "melange/format.js";
import * as Stdlib__List from "melange/list.js";
import * as Stdlib__Option from "melange/option.js";
import * as Webapi__Dom__Element from "melange-webapi/Webapi/Dom/Webapi__Dom__Element.js";
import * as React from "react";
import * as JsxRuntime from "react/jsx-runtime";

function App$Container(Props) {
  let children = Props.children;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("img", {
                      src: "/public/feud-logo.png"
                    }),
                children
              ],
              className: "min-h-screen max-w-[500px] mx-auto tracking-tight flex flex-col"
            });
}

const Container = {
  make: App$Container
};

function make(question) {
  return function (index) {
    return function (count) {
      return function (increment) {
        return JsxRuntime.jsx(App$Container, {
                    children: JsxRuntime.jsxs("form", {
                          children: [
                            JsxRuntime.jsxs("div", {
                                  children: [
                                    JsxRuntime.jsx("div", {
                                          children: Curry._2(Stdlib__Format.sprintf(/* Format */{
                                                    _0: {
                                                      TAG: /* String_literal */11,
                                                      _0: "question! ",
                                                      _1: {
                                                        TAG: /* Int */4,
                                                        _0: /* Int_d */0,
                                                        _1: /* No_padding */0,
                                                        _2: /* No_precision */0,
                                                        _3: {
                                                          TAG: /* String_literal */11,
                                                          _0: " / ",
                                                          _1: {
                                                            TAG: /* Int */4,
                                                            _0: /* Int_d */0,
                                                            _1: /* No_padding */0,
                                                            _2: /* No_precision */0,
                                                            _3: /* End_of_format */0
                                                          }
                                                        }
                                                      }
                                                    },
                                                    _1: "question! %d / %d"
                                                  }), index, count),
                                          className: "text-muted px-4"
                                        }),
                                    JsxRuntime.jsx("label", {
                                          children: question,
                                          className: "text-white px-4 font-medium",
                                          htmlFor: "game-answer"
                                        }),
                                    JsxRuntime.jsx("input", {
                                          className: "bg-white bg-opacity-[12%] py-2 px-4 text-[#B7B7B7] focus:bg-[#220B00] focus:ring-1 focus:ring-inset focus:ring-[#FF5C00] outline-none focus:outline-none",
                                          id: "game-answer",
                                          autoFocus: true,
                                          name: "answer",
                                          placeholder: "answer",
                                          type: "text"
                                        })
                                  ],
                                  className: "flex flex-col gap-6"
                                }),
                            JsxRuntime.jsx("button", {
                                  children: "next",
                                  className: "bg-brand py-2 px-4 text-white font-semibold text-lg",
                                  type: "submit"
                                })
                          ],
                          className: "px-6 pb-6 grow h-full flex flex-col justify-between",
                          onSubmit: (function (e) {
                              e.preventDefault();
                              e.stopPropagation();
                              Curry._1(increment, undefined);
                            })
                        })
                  });
      };
    };
  };
}

function App$Questionaire(Props) {
  return Curry._2(make(Props.question)(Props.index), Props.count, Props.increment);
}

const Questionaire = {
  make: App$Questionaire
};

function App$NotRunning(Props) {
  return JsxRuntime.jsx(App$Container, {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                            children: "// ready to play?"
                          }),
                      JsxRuntime.jsx("div", {
                            children: "// give quick short answers..."
                          }),
                      JsxRuntime.jsx("div", {
                            children: "// this page will update automatically",
                            className: "mt-4"
                          }),
                      JsxRuntime.jsx("div", {
                            children: "// when the survey beings, hang tight"
                          })
                    ],
                    className: "flex flex-col mx-auto text-muted"
                  })
            });
}

const NotRunning = {
  make: App$NotRunning
};

function App$Done(Props) {
  const match = React.useState(function () {
        return 0;
      });
  const setidx = match[1];
  const idx = match[0];
  const timeout_function = function (param) {
    if (idx < Stdlib__List.length(Melange__ScrollingMessages.messages)) {
      return Curry._1(setidx, (function (i) {
                    return i + 1 | 0;
                  }));
    }
    
  };
  setTimeout(timeout_function, 200);
  const displayLines = Caml_array.make(idx, null);
  Stdlib__Array.iteri((function (idx, param) {
          Caml_array.set(displayLines, idx, Stdlib__List.nth(Melange__ScrollingMessages.messages, idx));
        }), displayLines);
  return JsxRuntime.jsx(App$Container, {
              children: JsxRuntime.jsx("div", {
                    children: displayLines,
                    className: "text-white flex flex-col justify-end p-6 w-full h-lvh -z-10 absolute inset-0 whitespace-pre-wrap overflow-x-hidden"
                  })
            });
}

const Done = {
  make: App$Done
};

const listenWebSocket = (function(url, callback) {
        console.log("listening to websocket", url)
        // "ws://localhost:3000/ws"
        const ws = new WebSocket(`ws://jean-types-icq-calls.trycloudflare.com/ws`)
        ws.onmessage = function(evt) {
            console.log("got message", evt.data)
            try {
                const data = JSON.parse(evt.data)
                callback(data)
            } catch (e) {
            }
        }
        return function() {
            ws.close()
        }
    }
);

function post_response(idx) {
  const get_answer = function (param) {
    const doc = document;
    const element = doc.querySelector("#game-answer");
    const element$1 = Stdlib__Option.get((element == null) ? undefined : Caml_option.some(element));
    const value = Webapi__Dom__Element.asHtmlElement(element$1);
    return Stdlib__Option.get(value).value;
  };
  const make_headers = function (content_type, param) {
    const dict = {};
    dict["Content-Type"] = content_type;
    return dict;
  };
  const headers = make_headers("application/json", undefined);
  const answer = get_answer(undefined);
  const body = Stdlib__Option.get(JSON.stringify({
            idx: idx,
            answer: answer
          }));
  console.log([
        "Answering:",
        body
      ]);
  const init = Fetch.RequestInit.make(/* Post */2, Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined);
  fetch("/answer", init);
}

function reducer(state, action) {
  if (action) {
    return action._0;
  } else {
    return {
            running: state.running,
            currentIdx: state.currentIdx + 1 | 0,
            questions: state.questions,
            users: state.users
          };
  }
}

function App$App(Props) {
  let state = Props.state;
  const match = React.useReducer(reducer, state);
  const dispatch = match[1];
  const state$1 = match[0];
  const increment = function (param) {
    console.log("Calling Increment");
    post_response(state$1.currentIdx + 1 | 0);
    Curry._1(dispatch, /* Increment */0);
  };
  if (!state$1.running) {
    return JsxRuntime.jsx(App$NotRunning, {});
  }
  const currentIdx = state$1.currentIdx;
  if (currentIdx >= state$1.questions.length) {
    return JsxRuntime.jsx(App$Done, {});
  }
  const question = Caml_array.get(state$1.questions, state$1.currentIdx);
  const index = currentIdx + 1 | 0;
  const count = state$1.questions.length;
  return JsxRuntime.jsx(App$Questionaire, {
              question: question,
              index: index,
              count: count,
              increment: increment
            });
}

const App = {
  reducer: reducer,
  make: App$App
};

const $$default = App$App;

export {
  Container ,
  Questionaire ,
  NotRunning ,
  Done ,
  listenWebSocket ,
  post_response ,
  App ,
  $$default as default,
}
/* Melange__ScrollingMessages Not a pure module */
