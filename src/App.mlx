open React

type state = Agg.State.t

module Questionaire = struct
  let[@react.component] make ~question ~increment =
    <div className="">
      <div className="question">
        <span className="text-white">(string "Question: ")</span>
        <span className="text-white">(string question)</span>
      </div>
      <div className="answer">
        <input type_="text" name="answer" placeholder="rizz me daddy" />
      </div>
      <button className="text-white" onClick=increment>(string "Next")</button>
    </div>
  ;;
end

module NotRunning = struct
  let[@react.component] make () =
    <div className="text-white">(string "No active questions")</div>
  ;;
end

module Done = struct
  let[@react.component] make () =
    <div className="text-white">(string "You are so good at answering")</div>
  ;;
end

let listenWebSocket : string -> (state -> unit) -> unit -> unit =
  [%mel.raw
    {|
    function(url, callback) {
        console.log("listening to websocket", url)
        const ws = new WebSocket(url)
        ws.onmessage = function(evt) {
            console.log("got message", evt.data)
            try {
                const data = JSON.parse(evt.data)
                callback(data)
            } catch (e) {
            }
        }
        return function() {
            ws.close()
        }
    }
    |}]
;;

let rawDogFetch : int -> string -> unit =
  [%mel.raw
    {|
    function(idx, answer) {
        console.log("answering question", idx, answer)
fetch('/answer', {
   method: 'POST',
  headers: {
      'Content-Type': 'application/json',
    },
  body: JSON.stringify({ idx, answer }),
  })
    }
    |}]
;;
module App = struct
  type action =
    | Replace of state
    | Increment

  let reducer (state : state) = function
    | Increment -> {
        state with currentIdx = state.currentIdx + 1
    }
    | Replace state -> state
  ;;

  let[@react.component] make ~(state : state) =
    let state, dispatch = useReducer reducer state in
    let increment _ = dispatch Increment in
    useEffect (fun () ->
      let close =
        listenWebSocket "ws://localhost:3000/ws" (fun state ->
          Js.Console.log state;
          dispatch (Replace state))
      in
      Some close);
    match state with
    | { running = false; _ } -> <NotRunning />
    | { currentIdx; _ } when currentIdx < Array.length state.questions ->
      let question = state.questions.(state.currentIdx) in
      <Questionaire question increment />
    | _ -> <Done />
  ;;
end

let default = App.make
