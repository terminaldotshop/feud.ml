open React

type state = Agg.State.t

module Container = struct
  let[@react.component] make ~children =
    <div className="min-h-screen max-w-[500px] mx-auto tracking-tight flex flex-col">
      <img src="/public/feud-logo.png" /> children
    </div>
  ;;
end

module Questionaire = struct
  let[@react.component] make ~question ~index ~count ~increment =
    <Container>
      <form className="px-6 pb-6 grow h-full flex flex-col justify-between"
            onSubmit=(fun e ->
                       Event.Form.preventDefault e;
                       Event.Form.stopPropagation e;
                       increment ())>
        <div className="flex flex-col gap-6">
          <div className="text-muted px-4">
            (string @@ Format.sprintf "question! %d / %d" index count)
          </div>
          <label htmlFor="game-answer" className="text-white px-4 font-medium">
            (string question)
          </label>
          <input id="game-answer"
                 autoFocus=true
                 className="bg-white bg-opacity-[12%] py-2 px-4 text-[#B7B7B7] focus:bg-[#220B00] focus:ring-1 focus:ring-inset focus:ring-[#FF5C00] outline-none focus:outline-none"
                 type_="text"
                 name="answer"
                 placeholder="answer" />
        </div>
        <button type_="submit"
                className="bg-brand py-2 px-4 text-white font-semibold text-lg">
          (string "next")
        </button>
      </form>
    </Container>
  ;;
end

module NotRunning = struct
  let[@react.component] make () =
    <Container>
      <div className="flex flex-col mx-auto text-muted">
        <div>(string "// ready to play?")</div>
        <div>(string "// give quick short answers...")</div>
        <div className="mt-4">
          (string "// this page will update automatically")
        </div>
        <div>(string "// when the survey beings, hang tight")</div>
      </div>
    </Container>
  ;;
end

module Done = struct
  let[@react.component] make () =
    let allLines = ScrollingMessages.messages in
    let idx, setidx = useState (fun () -> 0) in
    let timeout_function () =
      match idx with
      | idx when idx < List.length allLines -> setidx (fun i -> i + 1)
      | _ -> ()
    in
    let _ = Js.Global.setTimeout ~f:timeout_function 200 in
    let displayLines = Array.make idx null in
    Array.iteri
      (fun idx _ -> displayLines.(idx) <- List.nth allLines idx)
      displayLines;
    <Container>
      <div className="text-white flex flex-col justify-end p-6 w-full h-lvh -z-10 absolute inset-0 whitespace-pre-wrap overflow-x-hidden">
        (array displayLines)
      </div>
    </Container>
  ;;
end

let listenWebSocket : (state -> unit) -> unit -> unit =
  [%mel.raw
    {|
    function(url, callback) {
        console.log("listening to websocket", url)
        // "ws://localhost:3000/ws"
        const ws = new WebSocket(`ws://jean-types-icq-calls.trycloudflare.com/ws`)
        ws.onmessage = function(evt) {
            console.log("got message", evt.data)
            try {
                const data = JSON.parse(evt.data)
                callback(data)
            } catch (e) {
            }
        }
        return function() {
            ws.close()
        }
    }
    |}]
;;

let post_response idx =
  let get_answer () =
    let doc = Webapi.Dom.document in
    let element = Webapi.Dom.Document.querySelector "#game-answer" doc in
    let element = Option.get element in
    let value = Webapi.Dom.Element.asHtmlElement element in
    let value = Option.get value in
    Webapi.Dom.HtmlElement.value value
  in
  let make_headers ~content_type () =
    let dict = Js.Dict.empty () in
    Js.Dict.set dict "Content-Type" content_type;
    dict |> Fetch.HeadersInit.makeWithDict
  in
  let headers = make_headers ~content_type:"application/json" () in
  let answer = get_answer () in
  let body =
    [%mel.obj { idx; answer }]
    |> Js.Json.stringifyAny
    |> Option.get
    |> Fetch.BodyInit.make
  in
  Js.Console.log ("Answering:", body);
  let init = Fetch.RequestInit.make ~method_:Post ~headers ~body () in
  Fetch.fetchWithInit "/answer" init |> ignore
;;

module App = struct
  type action =
    | Replace of state
    | Increment

  let reducer (state : state) action =
    match action with
    | Increment -> { state with currentIdx = state.currentIdx + 1 }
    | Replace state -> state
  ;;

  let[@react.component] make ~(state : state) =
    let state, dispatch = useReducer reducer state in
    let increment _ =
      Js.Console.log "Calling Increment";
      post_response (state.currentIdx + 1);
      dispatch Increment
    in
    (* useEffect (fun () -> *)
    (*   let close = *)
    (*     listenWebSocket (fun state -> *)
    (*       Js.Console.log state; *)
    (*       dispatch (Replace state)) *)
    (*   in *)
    (*   Some close); *)
    match state with
    | { running = false; _ } -> <NotRunning />
    | { currentIdx; _ } when currentIdx < Array.length state.questions ->
      let question = state.questions.(state.currentIdx) in
      let index = currentIdx + 1 in
      let count = Array.length state.questions in
      <Questionaire question index count increment />
    | _ -> <Done />
  ;;
end

let default = App.make
