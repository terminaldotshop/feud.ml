open React

type state = Agg.State.t

module Container = struct
  let[@react.component] make ~children =
    <div className="min-h-screen max-w-[500px] mx-auto tracking-tight flex flex-col">
      <img src="/public/feud-logo.png" />
      children 
    </div>
  ;;
end

module Questionaire = struct
  let[@react.component] make ~question ~index ~count ~increment =
    <Container>
      <form className="p-6 h-full grow h-full flex flex-col justify-between" onSubmit=increment>
        <div className="flex flex-col gap-6">
          <div className="text-muted px-4">
            (string @@ Format.sprintf "question %d / %d" index count)
          </div>
          <label htmlFor="game-answer" className="text-white px-4 font-medium">(string question)</label>
          <input id="game-answer"
                 autoFocus=true
                 className="bg-white bg-opacity-[12%] py-2 px-4 text-[#B7B7B7] focus:bg-[#220B00] focus:ring-1 focus:ring-inset focus:ring-[#FF5C00] outline-none focus:outline-none"
                 type_="text"
                 name="answer"
                 placeholder="answer" />
        </div>
        <button type_="submit" className="bg-brand py-2 px-4 text-white font-semibold text-lg">
          (string "next")
        </button>
      </form>
    </Container>
  ;;
end

module NotRunning = struct
  let[@react.component] make () =
    <Container>
      <div className="flex flex-col mx-auto text-muted">
        <div>(string "// ready to play?")</div>
        <div>(string "// give quick short answers...")</div>
        <div className="mt-4">(string "// this page will update automatically")</div>
        <div>(string "// when the survey beings, hang tight")</div>
      </div>
    </Container>
  ;;
end

module Done = struct
  let[@react.component] make () =
    <Container>
      <div className="text-white">
        (string
           "Thanks for playing! Your answers are being tabulated and calculated")
      </div>
    </Container>
  ;;
end

let listenWebSocket : string -> (state -> unit) -> unit -> unit =
  [%mel.raw
    {|
    function(url, callback) {
        console.log("listening to websocket", url)
        const ws = new WebSocket(url)
        ws.onmessage = function(evt) {
            console.log("got message", evt.data)
            try {
                const data = JSON.parse(evt.data)
                callback(data)
            } catch (e) {
            }
        }
        return function() {
            ws.close()
        }
    }
    |}]
;;

let rawDogFetch : int -> unit =
  [%mel.raw
    {|
    function(idx) {
      const el = document.querySelector("#game-answer")
      const answer = el.value
        console.log("answering question", idx + 1, answer)
fetch('/answer', {
   method: 'POST',
  headers: {
      'Content-Type': 'application/json',
    },
  body: JSON.stringify({ idx: idx + 1, answer }),
  })
    }
    |}]
;;

module App = struct
  type action =
    | Replace of state
    | Increment

  let reducer (state : state) action =
    match action with
    | Increment ->
      rawDogFetch state.currentIdx;
      { state with currentIdx = state.currentIdx + 1 }
    | Replace state -> state
  ;;

  let[@react.component] make ~(state : state) =
    let state, dispatch = useReducer reducer state in
    let increment _ = dispatch Increment in
    useEffect (fun () ->
      let close =
        listenWebSocket "ws://localhost:3000/ws" (fun state ->
          Js.Console.log state;
          dispatch (Replace state))
      in
      Some close);
    match state with
    | { running = false; _ } -> <NotRunning />
    | { currentIdx; _ } when currentIdx < Array.length state.questions ->
      let question = state.questions.(state.currentIdx) in
      let index = currentIdx + 1 in
      let count = Array.length state.questions in
      <Questionaire question index count increment />
    | _ -> <Done />
  ;;
end

let default = App.make
