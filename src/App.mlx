open React

type state = Agg.State.t

module Container = struct
  let[@react.component] make ~children =
    <div className="gap-4 flex flex-col h-full max-w-[500px] mx-auto">
      <img src="/public/feud-logo.png" /> children
    </div>
  ;;
end

module Questionaire = struct
  let[@react.component] make ~question ~index ~count ~increment =
    <Container>
      <div className="p-6 gap-4 flex flex-col text-white">
        <div className="tracking-tight">
          <span className="text-white">
            (string @@ Format.sprintf "Question %d / %d" index count)
          </span>
        </div>
        <div className="tracking-tight">
          <span className="text-white">(string question)</span>
        </div>
        <input id="game-answer"
               className="bg-[#242424] p-2 rounded"
               type_="text"
               name="answer"
               placeholder="answer" />
      </div>
      <button className="bg-[#FF5C00] p-2 rounded text-white" onClick=increment>
        (string "Next")
      </button>
    </Container>
  ;;
end

module NotRunning = struct
  let[@react.component] make () =
    <Container>
      <div className="flex flex-col text-white mx-auto">
        <div>(string "We are not currently collecting questions")</div>
        <div>(string "This page will update when we are ready!")</div>
      </div>
    </Container>
  ;;
end

module Done = struct
  let[@react.component] make () =
    <Container>
      <div className="text-white">
        (string
           "Thanks for playing! Your answers are being tabulated and calculated")
      </div>
    </Container>
  ;;
end

let listenWebSocket : string -> (state -> unit) -> unit -> unit =
  [%mel.raw
    {|
    function(url, callback) {
        console.log("listening to websocket", url)
        const ws = new WebSocket(url)
        ws.onmessage = function(evt) {
            console.log("got message", evt.data)
            try {
                const data = JSON.parse(evt.data)
                callback(data)
            } catch (e) {
            }
        }
        return function() {
            ws.close()
        }
    }
    |}]
;;

let rawDogFetch : int -> unit =
  [%mel.raw
    {|
    function(idx) {
      const el = document.querySelector("#game-answer")
      const answer = el.value
        console.log("answering question", idx + 1, answer)
fetch('/answer', {
   method: 'POST',
  headers: {
      'Content-Type': 'application/json',
    },
  body: JSON.stringify({ idx: idx + 1, answer }),
  })
    }
    |}]
;;

module App = struct
  type action =
    | Replace of state
    | Increment

  let reducer (state : state) action =
    match action with
    | Increment ->
      rawDogFetch state.currentIdx;
      { state with currentIdx = state.currentIdx + 1 }
    | Replace state -> state
  ;;

  let[@react.component] make ~(state : state) =
    let state, dispatch = useReducer reducer state in
    let increment _ = dispatch Increment in
    useEffect (fun () ->
      let close =
        listenWebSocket "ws://localhost:3000/ws" (fun state ->
          Js.Console.log state;
          dispatch (Replace state))
      in
      Some close);
    match state with
    | { running = false; _ } -> <NotRunning />
    | { currentIdx; _ } when currentIdx < Array.length state.questions ->
      let question = state.questions.(state.currentIdx) in
      let index = currentIdx + 1 in
      let count = Array.length state.questions in
      <Questionaire question index count increment />
    | _ -> <Done />
  ;;
end

let default = App.make
