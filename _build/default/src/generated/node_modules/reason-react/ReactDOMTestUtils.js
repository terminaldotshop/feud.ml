// Generated by Melange

import * as Caml_option from "melange.js/caml_option.js";
import * as Curry from "melange.js/curry.js";
import * as Stdlib__Array from "melange/array.js";
import * as Stdlib__Option from "melange/option.js";
import * as TestUtils from "react-dom/test-utils";

function act(func) {
  const reactFunc = function () {
    Curry._1(func, undefined);
  };
  TestUtils.act(reactFunc);
}

function actAsync(func) {
  return TestUtils.act(function () {
              return Curry._1(func, undefined);
            });
}

function changeWithValue(element, value) {
  const $$event = {
    target: {
      value: value
    }
  };
  TestUtils.Simulate.change(element, $$event);
}

function changeWithChecked(element, value) {
  const $$event = {
    target: {
      checked: value
    }
  };
  TestUtils.Simulate.change(element, $$event);
}

const Simulate = {
  changeWithValue: changeWithValue,
  changeWithChecked: changeWithChecked
};

function findBySelector(element, selector) {
  return Caml_option.nullable_to_opt(element.querySelector(selector));
}

function findByAllSelector(element, selector) {
  return Array.from(element.querySelectorAll(selector));
}

function findBySelectorAndTextContent(element, selector, content) {
  return Stdlib__Array.find_opt((function (node) {
                return node.textContent === content;
              }), Array.from(element.querySelectorAll(selector)));
}

function findBySelectorAndPartialTextContent(element, selector, content) {
  return Stdlib__Array.find_opt((function (node) {
                return node.textContent.includes(content, undefined);
              }), Array.from(element.querySelectorAll(selector)));
}

const DOM = {
  findBySelector: findBySelector,
  findByAllSelector: findByAllSelector,
  findBySelectorAndTextContent: findBySelectorAndTextContent,
  findBySelectorAndPartialTextContent: findBySelectorAndPartialTextContent
};

function prepareContainer(container, param) {
  const containerElement = document.createElement("div");
  Stdlib__Option.map((function (body) {
          return body.appendChild(containerElement);
        }), Caml_option.nullable_to_opt(document.body));
  container.contents = Caml_option.some(containerElement);
}

function cleanupContainer(container, param) {
  Stdlib__Option.map((function (prim) {
          prim.remove();
        }), container.contents);
  container.contents = undefined;
}

function getContainer(container) {
  return Stdlib__Option.get(container.contents);
}

export {
  act ,
  actAsync ,
  Simulate ,
  DOM ,
  prepareContainer ,
  cleanupContainer ,
  getContainer ,
}
/* react-dom/test-utils Not a pure module */
